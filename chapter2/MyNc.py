#!/bin/python

import sys
import socket
import getopt
import threading
import subprocess
# define some global variables
listen = False
command = False
upload = False
execute = ""
target = ""
upload_destination = ""
port = 0

def usage():
    print("BHP Net Tool")
    print
    print("Usage: bhpnet.py -t target_host -p port")
    print("-l --listen - listen on [host]:[port] for ¬ incoming connections")
    print("-e --execute=file_to_run - execute the given file upon ¬ receiving a connection")
    print("-c --command - initialize a command shell")
    print("-u --upload=destination - upon receiving connection upload a ¬ file and write to [destination]")
    print
    print
    print("Examples:")
    print("bhpnet.py -t 192.168.0.1 -p 5555 -l -c")
    print("bhpnet.py -t 192.168.0.1 -p 5555 -l -u=c:\\target.exe")
    print("bhpnet.py -t 192.168.0.1 -p 5555 -l -e=\"cat /etc/passwd\"")
    print("echo 'ABCDEFGHI' | ./bhpnet.py -t 192.168.11.12 -p 135")
    sys.exit(0)

def main():
    global listen
    global port
    global execute
    global command
    global upload_destination
    global target

    if len(sys.argv) < 2:
        usage()
    try:
        arguments,values=getopt.getopt(sys.argv[1:],"le:u:t:p:hc",["listen","execute","upload","target","port","help","command"])
    except getopt.GetoptError as err:
        print(str(err))
        usage()

    for o,a in arguments:
        if o in ("-h","--help"):
            usage()
        elif o in ("-l","--listen"):
            listen = True
        elif o in ("-e", "--execute"):
            execute = a
        elif o in ("-c", "--commandshell"):
            command = True
        elif o in ("-u", "--upload"): 
            upload_destination = a
        elif o in ("-t", "--target"):
            target = a
        elif o in ("-p", "--port"):
            port = int(a)
        else: assert False,"Unhandled Option"

    # if not listen then send data
    if not listen and len(target) > 0 and port >0:
        print("Will send request")
        bufferdata=sys.stdin.read()
        client_sender(bufferdata) # send data 

    if listen:
        print("About to start listenint")
        server_loop()

def client_sender(bufferdata):
    global target
    global port

    client=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    try:    
        client.connect((target,port))
        client.send(bufferdata.encode())
        #now wait for data back
        while True:
            recv_len=1
            response=""
            while True:
                res=client.recv(4096).decode()
                recv_len=len(res)
                response+=res
    
                if recv_len<4096:
                    break
            print(response)
            #wait for more input
            bufferdata = raw_input("")
            bufferdata += "\n"
            client.send(bufferdata.encode())
    except:
        print("Exception exiting")
        client.close()

def server_loop():
    global target
    global port    
    print("Inside server loop")
    server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    server.bind((target,int(port)))
    server.listen(5)
    print(f"Started listening on port {port} for target {target}")
    while True:
        client_socket,addr = server.accept()
        print(f"accepted a request via {addr[0]} on port {addr[1]}")
        myClientThread=threading.Thread(target=client_handle,args=(client_socket,))
        myClientThread.start()

def run_command(command):
    command=command.rstrip()
    try:
        output=subprocess.check_output(command,stderr=subprocess.STDOUT,shell=True)
    except:
        output="failed to execute"
    return output

def client_handle(client_socket):
    global upload_destination
    global execute
    global command

    if len(upload_destination):
        file_bufferdata=""
        while True:
            resp = client_socket.recv(1024).decode()
            file_bufferdata+=resp
            if len(resp) < 1024:
                break
        try:
            with open(upload_destination,"wb") as fileUpload:
                fileUpload.write(file_bufferdata)
        except:
            client_socket.send("Failed to upload".encode())
            client_socket.close()
            sys.exit(0)

    if len(execute):
        output = run_command(command)
        client_socket.send(output.encode())

    if command:
        try: 
            while True:
                client_socket.send("<#VANSH>".encode())
                cmd_bufferdata=""
                while "\n" not in cmd_bufferdata:
                    cmd_bufferdata += client_socket.recv(1024).decode()
                response = run_command(cmd_bufferdata)
                client_socket.send(response)
        except:
            client_socket.send("Failed to run".encode())
            client_socket.close()
if __name__=='__main__':
    main()
